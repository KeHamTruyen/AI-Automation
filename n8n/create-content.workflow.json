{
  "name": "Create Content (AI)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "create-content",
        "respond": true,
        "responseMode": "responseNode",
        "options": {},
        "authentication": "headerAuth",
        "headerName": "X-Webhook-Secret",
        "headerValue": "REPLACE_WITH_N8N_WEBHOOK_SECRET"
      },
      "id": "Webhook",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        280,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "const prompt = $json.prompt || '';\nconst tone = $json.tone || 'professional';\nconst length = $json.length || 'medium';\nconst platform = $json.platform || 'facebook';\nreturn [{ json: { prompt, tone, length, platform } }];"
      },
      "id": "Normalize",
      "name": "Normalize Input",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        540,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$env.OPENAI_API_KEY && $env.OPENAI_API_KEY !== ''}}"
            }
          ]
        }
      },
      "id": "UseOpenAI",
      "name": "Use OpenAI?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        780,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "options": {
          "headers": {
            "Content-Type": "application/json",
            "Authorization": "=Bearer {{$env.OPENAI_API_KEY}}"
          }
        },
        "sendBody": true,
        "jsonParameters": true,
        "optionsUi": {
          "bodyContentType": "json"
        },
        "bodyParametersJson": "={\n  \"model\": \"gpt-4o-mini\",\n  \"response_format\": { \"type\": \"json_object\" },\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a content generator that outputs strictly JSON with keys: content_text (string), hashtags (array of strings, max 10), suggested_images (array of URLs). Avoid markdown.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Prompt: {{$json.prompt}} | Tone: {{$json.tone}} | Length: {{$json.length}} | Platform: {{$json.platform}}\"\n    }\n  ],\n  \"temperature\": 0.7,\n  \"max_tokens\": 400\n}"
      },
      "id": "OpenAIChat",
      "name": "OpenAI Chat",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1040,
        180
      ]
    },
    {
      "parameters": {
        "functionCode": "// Parse OpenAI response and normalize to desired data shape\n// Expecting: item.json.choices[0].message.content to be a JSON string\nconst item = items[0];\nconst data = item.json;\nlet contentJson = {};\ntry {\n  const str = data.choices?.[0]?.message?.content || '{}';\n  contentJson = JSON.parse(str);\n} catch (e) {\n  contentJson = { error: 'Failed to parse OpenAI JSON content' };\n}\n// Build response\nreturn [{ json: {\n  success: true,\n  data: {\n    content_text: contentJson.content_text || '',\n    hashtags: Array.isArray(contentJson.hashtags) ? contentJson.hashtags.slice(0, 10) : [],\n    suggested_images: Array.isArray(contentJson.suggested_images) ? contentJson.suggested_images : [],\n    platform: $json.platform,\n    tone: $json.tone,\n    length: $json.length,\n    generatedAt: new Date().toISOString()\n  }\n}}];"
      },
      "id": "AssembleFromOpenAI",
      "name": "Assemble Output (AI)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1300,
        180
      ]
    },
    {
      "parameters": {
        "functionCode": "// Fallback mock content when OpenAI key is missing\nconst { prompt, platform, tone, length } = $json;\nconst platformPresets = {\n  facebook: {\n    content_text: `üöÄ ${prompt}\n\nKh√°m ph√° gi·∫£i ph√°p ƒë·ªïi m·ªõi gi√∫p tƒÉng tr∆∞·ªüng v∆∞·ª£t b·∫≠c!`,\n    hashtags: ['#Innovation','#Business','#Growth','#Success'],\n    suggested_images: ['/placeholder.jpg']\n  },\n  instagram: {\n    content_text: `‚ú® ${prompt}\n\n#InstaGood #Lifestyle #Trending`,\n    hashtags: ['#InstaGood','#Lifestyle','#Trending','#Motivation'],\n    suggested_images: ['/placeholder.jpg','/placeholder.jpg']\n  },\n  twitter: {\n    content_text: `üî• ${prompt} ‚Äî T∆∞∆°ng lai ƒë√£ ƒë·∫øn!`,\n    hashtags: ['#Tech','#Innovation','#Business'],\n    suggested_images: ['/placeholder.jpg']\n  },\n  linkedin: {\n    content_text: `${prompt}\n\nC√°c chi·∫øn l∆∞·ª£c ƒë·ªïi m·ªõi gi√∫p doanh nghi·ªáp b·ª©t ph√° b·ªÅn v·ªØng.`,\n    hashtags: ['#BusinessStrategy','#Innovation','#Growth','#Leadership'],\n    suggested_images: ['/placeholder.jpg']\n  }\n};\nconst preset = platformPresets[platform] || platformPresets.facebook;\nreturn [{ json: { success: true, data: { ...preset, platform, tone, length, generatedAt: new Date().toISOString() } } }];"
      },
      "id": "MockContent",
      "name": "Mock Output",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1040,
        420
      ]
    },
    {
      "parameters": {
        "responseBody": "={{$json}}",
        "responseCode": 200
      },
      "id": "RespondOK",
      "name": "Respond 200",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1560,
        180
      ]
    },
    {
      "parameters": {
        "responseBody": "={{$json}}",
        "responseCode": 200
      },
      "id": "RespondMock",
      "name": "Respond 200 (Mock)",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1300,
        420
      ]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Normalize Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Input": {
      "main": [
        [
          {
            "node": "Use OpenAI?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Use OpenAI?": {
      "main": [
        [
          {
            "node": "OpenAI Chat",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Mock Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat": {
      "main": [
        [
          {
            "node": "Assemble Output (AI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assemble Output (AI)": {
      "main": [
        [
          {
            "node": "Respond 200",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mock Output": {
      "main": [
        [
          {
            "node": "Respond 200 (Mock)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "staticData": null,
  "settings": {
    "executionOrder": "v1"
  },
  "meta": {
    "templateCredsSetup": []
  }
}
