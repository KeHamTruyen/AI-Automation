{
  "name": "Publish Scheduled Posts (Poll + ACK + Execute)",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "hour": "",
              "minute": "*/1",
              "dayOfMonth": "",
              "month": "",
              "dayOfWeek": ""
            }
          ]
        }
      },
      "name": "Cron",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [250, 250]
    },
    {
      "parameters": {
        "requestMethod": "GET",
        "url": "={{ $env.API_BASE_URL + '/api/schedule/due?limit=20' }}",
        "responseFormat": "json",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "Authorization",
              "value": "= 'Bearer ' + $env.SCHEDULE_API_KEY"
            }
          ]
        }
      },
      "name": "Fetch Due Tasks",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [500, 250]
    },
    {
      "parameters": {
        "functionCode": "// Extract tasks array and return one item per task\nconst data = items[0].json?.data || items[0].json || {};\nconst tasks = Array.isArray(data.items) ? data.items : (Array.isArray(items[0].json) ? items[0].json : []);\nreturn tasks.map(t => ({ json: t }));"
      },
      "name": "Extract Tasks",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [750, 250]
    },
    {
      "parameters": {
        "operation": "splitIntoItems",
        "batchSize": 1
      },
      "name": "Split In Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [950, 250]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "= `${$env.API_BASE_URL}/api/schedule/${$json.id}/ack`",
        "responseFormat": "json",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "Authorization",
              "value": "= 'Bearer ' + $env.SCHEDULE_API_KEY"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "name": "ACK Task",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [1200, 200]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{ $env.API_BASE_URL + '/api/post/execute' }}",
        "responseFormat": "json",
        "jsonBody": true,
        "options": {},
        "bodyParametersJson": "={{ { postTicket: $json.postTicket || $json.post_ticket || $json.postTicketFromAck } }}"
      },
      "name": "Execute Post (App Proxy)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [1450, 200]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "= `${$env.API_BASE_URL}/api/schedule/${$json.id}/done`",
        "responseFormat": "json",
        "jsonBody": true,
        "bodyParametersJson": "={{ { success: $json.success, externalPostId: $json.externalPostId, error: $json.error } }}",
        "headerParametersUi": {
          "parameter": [
            {
              "name": "Authorization",
              "value": "= 'Bearer ' + $env.SCHEDULE_API_KEY"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        }
      },
      "name": "Report Done",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [1700, 200]
    },
    {
      "parameters": {
        "functionCode": "// Build ackGuard: if ack returns error (409 etc.) we stop handling this item\nconst res = items[0].json;\nif(!res || res.success === false) {\n  // propagate to done with failure info\n  return [{ json: { success: false, externalPostId: null, error: res && res.error ? res.error : 'ACK failed' } }];\n}\n// Put postTicket from ack into json for next node to use\nreturn [{ json: { ...res, postTicket: res.postTicket || res.post_ticket || res.data?.postTicket } }];"
      },
      "name": "ACK Guard / Normalize",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1325, 200]
    },
    {
      "parameters": {
        "functionCode": "// On execute result normalize for Report Done\nconst res = items[0].json;\nif(!res) return [{ json: { success: false, error: 'No response from execute' } }];\nif(res.success === true || res.status === 'ok') {\n  return [{ json: { success: true, externalPostId: res.externalPostId || res.external_post_id || res.id || res.data?.externalPostId } }];\n}\nreturn [{ json: { success: false, error: JSON.stringify(res) } }];"
      },
      "name": "Normalize Execute Result",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1575, 200]
    }
  ],
  "connections": {
    "Cron": {
      "main": [
        [
          {
            "node": "Fetch Due Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Due Tasks": {
      "main": [
        [
          {
            "node": "Extract Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Tasks": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches": {
      "main": [
        [
          {
            "node": "ACK Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ACK Task": {
      "main": [
        [
          {
            "node": "ACK Guard / Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ACK Guard / Normalize": {
      "main": [
        [
          {
            "node": "Execute Post (App Proxy)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Post (App Proxy)": {
      "main": [
        [
          {
            "node": "Normalize Execute Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Execute Result": {
      "main": [
        [
          {
            "node": "Report Done",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "staticTemplates": []
}
